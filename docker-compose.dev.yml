version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-onesecureasia}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Backend service with development settings
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      # Use the Python virtual environment
      PATH: "/app/venv/bin:${PATH}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/backend/src
      - ./python-tests:/app/python-tests
      # Don't override node_modules
      - /app/backend/node_modules
      - /app/venv
    command: /bin/sh -c "cd /app/backend && npm run dev"
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Frontend service
  frontend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      # Don't override node_modules
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      - backend
    command: /bin/sh -c "npm install && npm start"
    dns:
      - 8.8.8.8
      - 8.8.4.4

volumes:
  postgres_data:
